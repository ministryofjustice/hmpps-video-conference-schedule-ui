/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/mapping/punishments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Creates a new set of adjudication punishment mapping and deletes ones no longer required
     * @description Creates a record of a DPS punishment id and NOMIS bookingId and sanction sequence. The ones that require deleting are removed NOMIS id. Requires NOMIS_ADJUDICATIONS
     */
    put: operations['updatePunishmentBatchMappings']
    /**
     * Creates a new set of adjudication punishment mapping
     * @description Creates a record of a DPS punishment id and NOMIS bookingId and sanction sequence. Requires NOMIS_ADJUDICATIONS
     */
    post: operations['createPunishmentBatchMappings']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/prisonperson/migration': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Creates or updates a prison person migration mapping
     * @description Creates or updates a mapping between nomis prisoner numbers and prison person history ids. Requires ROLE_NOMIS_PRISONPERSON
     */
    put: operations['upsertMapping']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/non-associations/merge/from/{oldOffenderNo}/to/{newOffenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Replaces all occurrences of the 'from' id with the 'to' id in the mapping table
     * @description Used for update after a prisoner number merge. Requires role NOMIS_NON_ASSOCIATIONS
     */
    put: operations['updateMappingsByNomisId']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-charges': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Creates a new set of court charge mapping and deletes ones no longer required
     * @description Creates a record of a DPS court charge id and NOMIS court charge id. The ones that require deleting are removed by NOMIS id. Requires NOMIS_COURT_SENTENCING
     */
    put: operations['courtChargeBatchUpdateMappings']
    /**
     * Creates a new single charge mapping
     * @description Creates a mapping between nomis offender charge ID and DPS charge ID. Requires ROLE_NOMIS_COURT_SENTENCING
     */
    post: operations['createCourtChargeMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes/merge/from/{oldOffenderNo}/to/{newOffenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Replaces all occurrences of the 'from' id with the 'to' id in the mapping table
     * @description Used for update after a prisoner number merge. Requires role ROLE_NOMIS_CASENOTES
     */
    put: operations['updateMappingsByNomisId_1']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes/merge/booking-id/{bookingId}/to/{newOffenderNo}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * For all case notes with the given booking id in the mapping table, sets the offender no to the given 'to' id
     * @description Used for update after a booking has been moved from one offender to another. Returns the affected case notes. Requires role ROLE_NOMIS_CASENOTES
     */
    put: operations['updateMappingsByBookingId']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/alerts/{offenderNo}/merge': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    /**
     * Replaces a set of new alert mappings for a prisoner and removes mappings for the removed prisoner record
     * @description Replaces the mappings between all the nomis alert ids and dps alert id. Any mappings on the removed prisoner record are deleted. Requires ROLE_NOMIS_ALERTS
     */
    put: operations['replaceMappingsForPrisonerAfterMerge']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/alerts/{offenderNo}/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets all alert mappings for a prisoner
     * @description Gets all the mapping between nomis alert ids and dps alert id related to specific prisoner created either via migration or synchronisation. Requires ROLE_NOMIS_ALERTS
     */
    get: operations['getMappingsForPrisoner']
    /**
     * Replaces a set of new alert mapping for a prisoner
     * @description Replaces the mappings between all the nomis alert ids and dps alert id. Requires ROLE_NOMIS_ALERTS
     */
    put: operations['replaceMappingsForPrisoner']
    /**
     * Creates a set of new alert mapping for a prisoner
     * @description Creates a mapping between all the nomis alert ids and dps alert id. Requires ROLE_NOMIS_ALERTS
     */
    post: operations['createMappingsForPrisoner']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/alerts/nomis-booking-id/{bookingId}/nomis-alert-sequence/{alertSequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by NOMIS id. Requires role NOMIS_ALERTS
     */
    get: operations['getMappingByNomisId']
    /**
     * updates mapping
     * @description Updates a mapping by NOMIS id setting a new NOMIS booking Id. Requires role NOMIS_ALERTS
     */
    put: operations['updateMappingBookingIdByNomisId']
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/activities': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all activities mappings
     * @description Get all the mapping table rows. Should only be used in dev (in pre/prod this could return excessive data). Requires role NOMIS_ACTIVITIES
     */
    get: operations['getAllMappings']
    /**
     * Updates an activity mapping
     * @description Updates a mapping between Nomis and Activities, including both the COURSE_ACTIVITY and COURSE_SCHEDULE. Requires NOMIS_ACTIVITIES
     */
    put: operations['updateMapping']
    /**
     * Creates a new activity mapping
     * @description Creates a mapping between nomis id and Activity service id. Requires NOMIS_ACTIVITIES
     */
    post: operations['createMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/{prisonId}/room-mappings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get room mappings for a prison
     * @description Retrieves  room mappings associated with a NOMIS prison id. Requires role NOMIS_VISITS
     */
    get: operations['getRoomMappings']
    put?: never
    /**
     * Creates a new room mapping
     * @description Creates a new room mapping. Requires role NOMIS_VISITS
     */
    post: operations['createRoomMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/visits': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new visit
     * @description Creates a new visit and decrements the visit balance. Requires role NOMIS_VISITS
     */
    post: operations['createMapping_1']
    /**
     * Deletes visit id mappings
     * @description Deletes all rows from the the visit id table. Requires role NOMIS_VISITS
     */
    delete: operations['deleteVisitIdMappings']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/sentencing/adjustments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get all paged mappings
     * @description Retrieve all mappings . Results are paged.
     */
    get: operations['getAllSentenceAdjustmentMappings']
    put?: never
    /**
     * Creates a new sentence adjustment mapping
     * @description Creates a mapping between nomis sentence adjustment ids and Sentencing service id. Requires ROLE_NOMIS_SENTENCING
     */
    post: operations['createMapping_2']
    /**
     * Deletes sentence adjustment mappings
     * @description Deletes all rows from the the sentence adjustment mapping table. Requires role NOMIS_SENTENCING
     */
    delete: operations['deleteSentenceAdjustmentMappings']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/prisonperson/identifying-mark-image': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create an identifying mark image mapping
     * @description Create an identifying mark image mapping. Requires ROLE_NOMIS_PRISONPERSON
     */
    post: operations['createIdentifyingMarkImageMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/prisonperson/identifying-mark': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Create an identifying mark mapping
     * @description Create an identifying mark mapping. Requires ROLE_NOMIS_PRISONPERSON
     */
    post: operations['createIdentifyingMarkMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/non-associations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new Non-association mapping
     * @description Creates a mapping between a Nomis non-association and non-association instance id. Requires role NOMIS_NON_ASSOCIATIONS
     */
    post: operations['createMapping_3']
    /**
     * Deletes non-association mappings.
     * @description Deletes all rows from the non-associations mapping table. Requires role NOMIS_NON_ASSOCIATIONS
     */
    delete: operations['deleteNonAssociationMappings']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/locations': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new Location mapping
     * @description Creates a mapping between a Nomis location id and a DPS location id. Requires role NOMIS_LOCATIONS
     */
    post: operations['createMapping_4']
    /**
     * Deletes location mappings.
     * @description Deletes all rows from the locations mapping table. Requires role NOMIS_LOCATIONS
     */
    delete: operations['deleteMappings']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/incidents': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new Incident Report mapping
     * @description Creates a mapping between a Nomis incident report id and DPS Incident report id. Requires role NOMIS_INCIDENTS
     */
    post: operations['createMapping_5']
    /**
     * Deletes incident mappings.
     * @description Deletes all rows from the incidents mapping table. Requires role NOMIS_INCIDENTS
     */
    delete: operations['deleteMappings_1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/incentives': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new incentive mapping
     * @description Creates a mapping between nomis Incentive ids and Incentive service id. Requires ROLE_NOMIS_INCENTIVES
     */
    post: operations['createMapping_6']
    /**
     * Deletes incentive mappings
     * @description Deletes all rows from the the incentive mapping table. Requires role NOMIS_INCENTIVES
     */
    delete: operations['deleteIncentiveMappings']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/hearings': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new hearing mapping
     * @description Creates a record of a DPS hearing Id and a NOMIS hearing Id . Requires NOMIS_ADJUDICATIONS
     */
    post: operations['createMapping_7']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/reviews': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new CSIP Review mapping
     * @description Creates a mapping between a Nomis CSIP review id and DPS CSIP review id. Requires role NOMIS_CSIP
     */
    post: operations['createReviewMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/plans': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new CSIP Plan mapping
     * @description Creates a mapping between a Nomis CSIP plan id and DPS CSIP plan id. Requires role NOMIS_CSIP
     */
    post: operations['createPlanMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/interviews': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new CSIP Interview mapping
     * @description Creates a mapping between a Nomis CSIP interview id and DPS CSIP interview id. Requires role NOMIS_CSIP
     */
    post: operations['createInterviewMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/factors': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new CSIP Factor mapping
     * @description Creates a mapping between a Nomis CSIP factor id and DPS CSIP factor id. Requires role NOMIS_CSIP
     */
    post: operations['createFactorMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/children/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Adds new child mappings to a CSIP Report
     * @description Adds child csip mappings. Requires role NOMIS_CSIP
     */
    post: operations['createChildMappings']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/attendees': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new CSIP Attendee mapping
     * @description Creates a mapping between a Nomis CSIP attendee id and DPS CSIP attendee id. Requires role NOMIS_CSIP
     */
    post: operations['createAttendeeMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new CSIP Report mapping along with any associated children
     * @description Creates a mapping between a Nomis CSIP report id and DPS CSIP report id and all its children. Requires role NOMIS_CSIP
     */
    post: operations['createMappingWithChildren']
    /**
     * Deletes CSIP mappings.
     * @description Deletes all rows from the csip mapping table. Requires role NOMIS_CSIP
     */
    delete: operations['deleteAllMappings']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new CSIP Report mapping
     * @description Creates a mapping between a Nomis CSIP report id and DPS CSIP report id. Requires role NOMIS_CSIP
     */
    post: operations['createMapping_8']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/sentences': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new sentence hierarchical mapping
     * @description Creates a mapping between nomis sentence ID (booking id and sentence seq) and DPS Sentence ID. Also maps child charge entities. Requires ROLE_NOMIS_COURT_SENTENCING
     */
    post: operations['createSentenceMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-cases': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new court case hierarchical mapping
     * @description Creates a mapping between nomis Court Case ID and DPS Court Case ID. Also maps child entities: Court appearances and charges. Requires ROLE_NOMIS_COURT_SENTENCING
     */
    post: operations['createMapping_9']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-appearances': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new court appearance mapping
     * @description Creates a mapping between nomis Court appearance ID and DPS Court appearance ID. Requires ROLE_NOMIS_COURT_SENTENCING
     */
    post: operations['createCourtAppearanceMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/phone': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates person phone mappings for synchronisation
     * @description Creates person phone mappings for synchronisation between NOMIS ids and dps ids. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonPhoneMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/person-restriction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates person restriction mappings for synchronisation
     * @description Creates person restriction mappings for synchronisation between NOMIS ids and dps ids. Requires ROLE_NOMIS_PERSONS
     */
    post: operations['createPersonRestrictionMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/person': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get paged person mappings by migration id
     * @description Retrieve all person mappings. Results are paged. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getAllPersonMappings']
    put?: never
    /**
     * Creates person mappings for synchronisation
     * @description Creates person mappings for synchronisation between NOMIS ids and dps ids. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/migrate': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a tree of contact person mappings typically for a migration
     * @description Creates a tree of contact person mappings typically for a migration between NOMIS ids and dps ids. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createMappings']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/identifier': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates person identifier mappings for synchronisation
     * @description Creates person identifier mappings for synchronisation between NOMIS ids and dps ids. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonIdentifierMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/email': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates person email mappings for synchronisation
     * @description Creates person email mappings for synchronisation between NOMIS ids and dps ids. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonEmailMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/contact-restriction': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates person contact restriction mappings for synchronisation
     * @description Creates person contact restriction mappings for synchronisation between NOMIS ids and dps ids. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonContactRestrictionMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/contact': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates person contact mappings for synchronisation
     * @description Creates person contact mappings for synchronisation between NOMIS ids and dps ids. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonContactMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/address': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates person address mappings for synchronisation
     * @description Creates person address mappings for synchronisation between NOMIS ids and dps ids. Requires ROLE_NOMIS_CONTACTPERSONS
     */
    post: operations['createPersonAddressMapping']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes/{offenderNo}/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets all case note mappings for a prisoner
     * @description Gets all the mapping between nomis case note ids and dps case note id related to specific prisoner created either via migration or synchronisation. Requires ROLE_NOMIS_ALERTS
     */
    get: operations['getMappingsForPrisoner_1']
    put?: never
    /**
     * Creates a set of new case note mappings for a prisoner
     * @description Creates a mapping between all the nomis case note ids and dps case note ids. Requires ROLE_NOMIS_CASENOTES
     */
    post: operations['createMappingsForPrisoner_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes/nomis-casenote-id': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * get mappings by Nomis id
     * @description Retrieves multiple mappings by NOMIS case note id. Requires role NOMIS_CASENOTES
     */
    post: operations['getMappingsByNomisId']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes/batch': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a batch of new casenote mappings
     * @description Creates a mapping between a batch of nomis casenote ids and dps casenote id. Requires ROLE_NOMIS_CASENOTES
     */
    post: operations['createMappings_1']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new casenote mapping
     * @description Creates a mapping between nomis casenote id and dps casenote id. Requires ROLE_NOMIS_CASENOTES
     */
    post: operations['createMapping_10']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/appointments': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all appointment mappings
     * @description Get all the mapping table rows. Should only be used in dev (in pre/prod this could return excessive data). Requires role NOMIS_APPOINTMENTS
     */
    get: operations['getAllMappings_1']
    put?: never
    /**
     * Creates a new appointment mapping
     * @description Creates a mapping between nomis id and Appointment instance id. Requires NOMIS_APPOINTMENTS
     */
    post: operations['createMapping_11']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/allocations/migration': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new allocation migration mapping
     * @description Creates a mapping between nomis allocation id and Actvities allocation id. Requires NOMIS_ACTIVITIES
     */
    post: operations['createMapping_12']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/alerts/batch': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a batch of new alert mappings
     * @description Creates a mapping between a batch of nomis alert ids and dps alert id. Requires ROLE_NOMIS_ALERTS
     */
    post: operations['createMappings_2']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/alerts': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all paged mappings
     * @description Retrieve all mappings. Results are paged.
     */
    get: operations['getMappings']
    put?: never
    /**
     * Creates a new alert mapping
     * @description Creates a mapping between nomis alert ids and dps alert id. Requires ROLE_NOMIS_ALERTS
     */
    post: operations['createMapping_13']
    /**
     * Deletes all alert mappings
     * @description Deletes all alert mappings regardless of source. This is expected to only ever been used in a non-production environment. Requires ROLE_NOMIS_ALERTS
     */
    delete: operations['deleteAllMappings_1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/adjudications/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new adjudication mapping along with associated hearings and punishments
     * @description Creates a record of a adjudication number, hearing and punishment. Requires NOMIS_ADJUDICATIONS
     */
    post: operations['createAllMappings']
    /**
     * Delete all adjudication related mapping entries
     * @description Delete mapping entries created during any migration or synchronisation for adjudications and associated hearings and punishments
     */
    delete: operations['deleteAllMappings_2']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/adjudications': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get all adjudication mappings
     * @description Get all the mapping table rows. Should only be used in dev (in pre/prod this could return excessive data). Requires role NOMIS_ADJUDICATIONS
     */
    get: operations['getAllMappings_2']
    put?: never
    /**
     * Creates a new adjudication mapping
     * @description Creates a record of a adjudication number. Requires NOMIS_ADJUDICATIONS
     */
    post: operations['createMapping_14']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/activities/migration': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new activity migration mapping
     * @description Creates a mapping between nomis id and up to 2 Activity service ids. Requires NOMIS_ACTIVITIES
     */
    post: operations['createMapping_15']
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/{prisonId}/room/nomis-room-id/{nomisRoomDescription}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get room mapping
     * @description Retrieves a room mapping by NOMIS prison id and NOMIS room id. Requires role NOMIS_VISITS
     */
    get: operations['getRoomMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/visits/vsipId/{vsipId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by VSIP id. Requires role NOMIS_VISITS
     */
    get: operations['getVisitMappingGivenVsipId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/visits/nomisId/{nomisId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by NOMIS id. Requires role NOMIS_VISITS
     */
    get: operations['getVisitMappingGivenNomisId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/visits/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMigratedVisitMappingsByMigrationId']
    put?: never
    post?: never
    /**
     * Delete mapping entries for the given migration id
     * @description Delete mapping entries created during a single migration for visits only
     */
    delete: operations['deleteVisitIdMappingsByMigrationId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/visits/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for a migration
     * @description Requires role NOMIS_VISITS
     */
    get: operations['getLatestMigratedVisitMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/sentencing/adjustments/nomis-adjustment-category/{nomisAdjustmentCategory}/nomis-adjustment-id/{nomisAdjustmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by NOMIS id. Requires role ROLE_NOMIS_SENTENCING
     */
    get: operations['getSentenceAdjustmentMappingGivenNomisId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/sentencing/adjustments/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMigratedSentenceAdjustmentMappingsByMigrationId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/sentencing/adjustments/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for a migration
     * @description Requires role NOMIS_SENTENCING
     */
    get: operations['getLatestMigratedSentenceAdjustmentMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/sentencing/adjustments/adjustment-id/{adjustmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by Sentencing adjustment id (from the sentencing domain). Requires role ROLE_NOMIS_SENTENCING
     */
    get: operations['getSentencingAdjustmentMapping']
    put?: never
    post?: never
    /**
     * Deletes a specific Sentence Adjustment mapping by sentence adjustment Id
     * @description Deletes the Sentence Adjustment mapping. Requires role NOMIS_SENTENCING
     */
    delete: operations['deleteSentenceAdjustmentMapping']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/punishments/{dpsPunishmentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by DPS punishment id. Requires role NOMIS_ADJUDICATIONS
     */
    get: operations['getMappingGivenDpsId']
    put?: never
    post?: never
    /**
     * Delete mapping
     * @description Deletes a mapping by DPS punishment id. Requires role NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteMappingByDpsId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/punishments/nomis-booking-id/{nomisBookingId}/nomis-sanction-sequence/{nomisSanctionSequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by NOMIS booking id and sanction sequence. Requires role NOMIS_ADJUDICATIONS
     */
    get: operations['getMappingGivenNomisId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/prisonperson/nomis-offender-image-id/{nomisImageId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets a single identifying mark image mapping by NOMIS id
     * @description Gets a single identifying mark image mapping by NOMIS id. Requires ROLE_NOMIS_PRISONPERSON
     */
    get: operations['getIdentifyingMarkImageMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/prisonperson/nomis-booking-id/{bookingId}/identifying-mark-sequence/{sequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets a single identifying mark mapping by NOMIS id
     * @description Gets a single identifying mark mapping by NOMIS id. Requires ROLE_NOMIS_PRISONPERSON
     */
    get: operations['getIdentifyingMarkMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/prisonperson/migration/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all prison person migration mappings for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMigratedPrisonPersonMappings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/prisonperson/dps-image-id/{dpsImageId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets an identifying mark image mapping by DPS image id
     * @description Gets an identifying mark image mapping by DPS image id. Requires ROLE_NOMIS_PRISONPERSON
     */
    get: operations['getIdentifyingMarkImageMappings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/prisonperson/dps-identifying-mark-id/{dpsId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Gets all NOMIS identifying mark mappings by DPS id
     * @description Gets all NOMIS identifying mark mappings by DPS id. Requires ROLE_NOMIS_PRISONPERSON
     */
    get: operations['getIdentifyingMarkMappings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/non-associations/non-association-id/{nonAssociationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by Non-Association Id. Requires role NOMIS_NON_ASSOCIATIONS
     */
    get: operations['getNonAssociationMappingGivenNonAssociationId']
    put?: never
    post?: never
    /**
     * Deletes a specific non-association mapping by nonAssociationId
     * @description Deletes the non-association from the mapping table. Requires role NOMIS_NON_ASSOCIATIONS
     */
    delete: operations['deleteNonAssociationMapping']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/non-associations/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getNonAssociationMappingsByMigrationId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/non-associations/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for a migration
     * @description Requires role NOMIS_NON_ASSOCIATIONS
     */
    get: operations['getLatestMigratedNonAssociationMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/non-associations/first-offender-no/{firstOffenderNo}/second-offender-no/{secondOffenderNo}/type-sequence/{typeSequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by firstOffenderNo, secondOffenderNo and Nomis type sequence. Requires role NOMIS_NON_ASSOCIATIONS
     */
    get: operations['getNonAssociationMappingGivenNomisId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/locations/nomis/{nomisLocationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by Nomis location id. Requires role NOMIS_LOCATIONS
     */
    get: operations['getMappingGivenNomisId_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/locations/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMappingsByMigrationId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/locations/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for a migration
     * @description Requires role NOMIS_LOCATIONS
     */
    get: operations['getLatestMigratedMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/locations/dps/{dpsLocationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by DPS Location Id. Requires role NOMIS_LOCATIONS
     */
    get: operations['getMappingGivenDpsId_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/incidents/nomis-incident-id/{nomisIncidentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by nomisIncidentId. Requires role NOMIS_INCIDENTS
     */
    get: operations['getMappingByNomisId_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/incidents/nomis-incident-id': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get a list of mappings for Nomis Incident id
     * @description Retrieves matching mappings for a list of NOMIS Incident ids. Requires role NOMIS_INCIDENTS
     */
    get: operations['getMappingsByNomisId_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/incidents/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMigratedMappingsByMigrationId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/incidents/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for a migration
     * @description Requires role NOMIS_INCIDENTS
     */
    get: operations['getMappingForLatestMigrated']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/incidents/dps-incident-id/{dpsIncidentId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by DPS Incident Id. Requires role NOMIS_INCIDENTS
     */
    get: operations['getMappingByDPSId']
    put?: never
    post?: never
    /**
     * Deletes a specific incident mapping by DPS incident id
     * @description Deletes the incident from the mapping table. Requires role NOMIS_INCIDENTS
     */
    delete: operations['deleteMapping']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/incentives/nomis-booking-id/{bookingId}/nomis-incentive-sequence/{incentiveSequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by NOMIS id. Requires role ROLE_NOMIS_INCENTIVES
     */
    get: operations['getIncentiveMappingGivenNomisId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/incentives/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMigratedVisitMappingsByMigrationId_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/incentives/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for a migration
     * @description Requires role READ_MAPPING, UPDATE_MAPPING or ADMIN_MAPPING
     */
    get: operations['getLatestMigratedIncentiveMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/incentives/incentive-id/{incentiveId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by Incentive id. Requires role ROLE_NOMIS_INCENTIVES
     */
    get: operations['getIncentiveMappingGivenIncentiveId']
    put?: never
    post?: never
    /**
     * Deletes a specific incentive mappings by incentiveId
     * @description Deletes the incentive mapping table. Requires role NOMIS_INCENTIVES
     */
    delete: operations['deleteIncentiveMapping']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/hearings/nomis/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by NOMIS hearing Id. Requires role NOMIS_ADJUDICATIONS
     */
    get: operations['getMappingGivenNomisId_2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/hearings/dps/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by DPS hearing Id. Requires role NOMIS_ADJUDICATIONS
     */
    get: operations['getMappingGivenDpsId_2']
    put?: never
    post?: never
    /**
     * Deletes a specific mapping by DPS hearing id
     * @description Deletes the mapping table row. Requires role NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteMapping_1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/reviews/nomis-csip-review-id/{nomisCSIPReviewId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get CSIP Review mapping
     * @description Retrieves a CSIP Review mapping by NOMIS id. Requires role NOMIS_CSIP
     */
    get: operations['getMappingByNomisId_2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/reviews/dps-csip-review-id/{dpsCSIPReviewId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get CSIP Review mapping
     * @description Retrieves a csip review mapping by DPS id. Requires role NOMIS_CSIP
     */
    get: operations['getCSIPReviewMappingByDpsId']
    put?: never
    post?: never
    /**
     * Deletes CSIP Review mapping
     * @description Deletes a CSIP Review mapping by DPS id. Requires role NOMIS_CSIP
     */
    delete: operations['deleteCSIPReviewMappingByDpsId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/plans/nomis-csip-plan-id/{nomisCSIPPlanId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get CSIP Plan mapping
     * @description Retrieves a CSIP Plan mapping by NOMIS id. Requires role NOMIS_CSIP
     */
    get: operations['getMappingByNomisId_3']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/plans/dps-csip-plan-id/{dpsCSIPPlanId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get CSIP Plan mapping
     * @description Retrieves a csip plan mapping by DPS id. Requires role NOMIS_CSIP
     */
    get: operations['getCSIPPlanMappingByDpsId']
    put?: never
    post?: never
    /**
     * Deletes CSIP Plan mapping
     * @description Deletes a CSIP Plan mapping by DPS id. Requires role NOMIS_CSIP
     */
    delete: operations['deleteCSIPPlanMappingByDpsId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/nomis-csip-id/{nomisCSIPId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by nomisCSIPId. Requires role NOMIS_CSIP
     */
    get: operations['getMappingByNomisId_4']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/nomis-csip-id': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get a list of mappings for Nomis CSIP Report ids
     * @description Retrieves matching mappings for a list of NOMIS CSIP report ids. Requires role NOMIS_CSIP
     */
    get: operations['getMappingsByNomisId_2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMappingsByMigrationId_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for a migration
     * @description Requires role NOMIS_CSIP
     */
    get: operations['getLatestMigratedCSIPMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/interviews/nomis-csip-interview-id/{nomisCSIPInterviewId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get CSIP Interview mapping
     * @description Retrieves a CSIP Interview mapping by NOMIS id. Requires role NOMIS_CSIP
     */
    get: operations['getMappingByNomisId_5']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/interviews/dps-csip-interview-id/{dpsCSIPInterviewId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get CSIP Interview mapping
     * @description Retrieves a csip interview mapping by DPS id. Requires role NOMIS_CSIP
     */
    get: operations['getCSIPInterviewMappingByDpsId']
    put?: never
    post?: never
    /**
     * Deletes CSIP Interview mapping
     * @description Deletes a CSIP Interview mapping by DPS id. Requires role NOMIS_CSIP
     */
    delete: operations['deleteCSIPInterviewMappingByDpsId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/factors/nomis-csip-factor-id/{nomisCSIPFactorId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get CSIP Factor mapping
     * @description Retrieves a CSIP Factor mapping by NOMIS id. Requires role NOMIS_CSIP
     */
    get: operations['getMappingByNomisId_6']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/factors/dps-csip-factor-id/{dpsCSIPFactorId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get CSIP Factor mapping
     * @description Retrieves a csip factor mapping by DPS id. Requires role NOMIS_CSIP
     */
    get: operations['getCSIPFactorMappingByDpsId']
    put?: never
    post?: never
    /**
     * Deletes CSIP Factor mapping
     * @description Deletes a CSIP Factor mapping by DPS id. Requires role NOMIS_CSIP
     */
    delete: operations['deleteCSIPFactorMappingByDpsId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/dps-csip-id/{csipId}/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get full mapping
     * @description Retrieves a mapping by DPS CSIP Report Id and all associated child mappings. Requires role NOMIS_CSIP
     */
    get: operations['getAllMappingsByDPSId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/dps-csip-id/{csipId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by DPS CSIP Id. Requires role NOMIS_CSIP
     */
    get: operations['getMappingByDPSId_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/attendees/nomis-csip-attendee-id/{nomisCSIPAttendeeId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get CSIP Attendee mapping
     * @description Retrieves a CSIP Attendee mapping by NOMIS id. Requires role NOMIS_CSIP
     */
    get: operations['getMappingByNomisId_7']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/attendees/dps-csip-attendee-id/{dpsCSIPAttendeeId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get CSIP Attendee mapping
     * @description Retrieves a csip attendee mapping by DPS id. Requires role NOMIS_CSIP
     */
    get: operations['getCSIPAttendeeMappingByDpsId']
    put?: never
    post?: never
    /**
     * Deletes CSIP Attendee mapping
     * @description Deletes a CSIP Attendee mapping by DPS id. Requires role NOMIS_CSIP
     */
    delete: operations['deleteCSIPAttendeeMappingByDpsId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/sentences/nomis-booking-id/{bookingId}/nomis-sentence-sequence/{sentenceSequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get sentence mapping
     * @description Retrieves a mapping by DPS id. Requires role NOMIS_COURT_SENTENCING
     */
    get: operations['getSentenceMappingByNomisId']
    put?: never
    post?: never
    /**
     * Deletes a sentence mapping
     * @description Deletes a sentence mapping by NOMIS id. Requires role NOMIS_COURT_SENTENCING
     */
    delete: operations['deleteSentenceMappingByNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/sentences/dps-sentence-id/{sentenceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get sentence mapping
     * @description Retrieves a mapping by DPS id. Requires role NOMIS_COURT_SENTENCING
     */
    get: operations['getSentenceMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-charges/nomis-court-charge-id/{courtChargeId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get court charge mapping
     * @description Retrieves a mapping by NOMIS id. Requires role NOMIS_COURT_SENTENCING
     */
    get: operations['getCourtChargeMappingByNomisId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-charges/dps-court-charge-id/{courtChargeId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get court charge mapping
     * @description Retrieves a mapping by DPS id. Requires role NOMIS_COURT_SENTENCING
     */
    get: operations['getCourtChargeMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-cases/nomis-court-case-id/{courtCaseId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get court case mapping
     * @description Retrieves a mapping by NOMIS id. Requires role NOMIS_COURT_SENTENCING
     */
    get: operations['getMappingByNomisId_8']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-cases/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get paged mappings by migration id
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMappingsByMigrationId_2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-cases/dps-court-case-id/{courtCaseId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get court case mapping
     * @description Retrieves a mapping by DPS id. Requires role NOMIS_COURT_SENTENCING
     */
    get: operations['getMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-appearances/nomis-court-appearance-id/{courtAppearanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get court appearance mapping
     * @description Retrieves a mapping by NOMIS id. Requires role NOMIS_COURT_SENTENCING
     */
    get: operations['getCourtAppearanceMappingByNomisId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-appearances/dps-court-appearance-id/{courtAppearanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get court appearance mapping
     * @description Retrieves a mapping by DPS id. Requires role NOMIS_COURT_SENTENCING
     */
    get: operations['getCourtAppearanceMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/phone/nomis-phone-id/{nomisPhoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person phone mapping by nomis phone Id
     * @description Retrieves the person phone mapping by NOMIS Phone Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonPhoneMappingByNomisId']
    put?: never
    post?: never
    /**
     * Delete person phone mapping by nomis phone Id
     * @description Delete the person phone mapping by NOMIS Phone Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonPhoneMappingByNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/phone/dps-contact-phone-id/{dpsContactPhoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person phone mapping by dps contact phone Id
     * @description Retrieves the person phone mapping by DPS Contact Phone Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonPhoneMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/phone/dps-contact-address-phone-id/{dpsContactAddressPhoneId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person mapping by dps contact address phone Id
     * @description Retrieves the person phone mapping by DPS Contact Address Phone Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonAddressPhoneMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/person/nomis-person-id/{nomisPersonId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person mapping by nomis person Id
     * @description Retrieves the person a mapping by NOMIS Person Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonMappingByNomisId']
    put?: never
    post?: never
    /**
     * Deletes person mapping by nomis person Id
     * @description Deletes the person a mapping by NOMIS Person Id, NB any child mappings e.g. peron address mappings remain untouched and should be removed separately. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonMappingByNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/person/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get paged person mappings by migration id
     * @description Retrieve all person mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonMappingsByMigrationId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/person/dps-contact-id/{dpsContactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person mapping by dps contact Id
     * @description Retrieves the person mapping by DPS Contact Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonMappingByDpsId']
    put?: never
    post?: never
    /**
     * Delete person mapping by dps contact Id
     * @description Delete the person mapping by DPS Contact Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonMappingByDpsId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/person-restriction/nomis-person-restriction-id/{nomisPersonRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person restriction mapping by nomis person restriction Id
     * @description Retrieves the person restriction mapping by NOMIS Person Restriction Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonRestrictionMappingByNomisId']
    put?: never
    post?: never
    /**
     * Delete person restriction mapping by nomis person restriction Id
     * @description Delete the person restriction mapping by NOMIS Person Restriction Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonRestrictionMappingByNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/person-restriction/dps-contact-restriction-id/{dpsContactRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person contact restriction mapping by dps contact restriction Id
     * @description Retrieves the person contact restriction mapping by DPS contact restriction Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonRestrictionMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/identifier/nomis-person-id/{nomisPersonId}/nomis-sequence-number/{nomisSequenceNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person identifier mapping by nomis person id and sequence
     * @description Retrieves the person identifier mapping by NOMIS person id and NOMIS sequence number. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonIdentifierMappingByNomisIds']
    put?: never
    post?: never
    /**
     * Delete person identifier mapping by nomis person id and sequence
     * @description Delete the person identifier mapping by NOMIS person id and NOMIS sequence number. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonIdentifierMappingByNomisIds']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/identifier/dps-contact-identifier-id/{dpsContactIdentifierId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get contact identifier mapping by dps contact identifier Id
     * @description Retrieves the person identifier mapping by DPS Contact Identifier Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonIdentifierMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/email/nomis-internet-address-id/{nomisInternetAddressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person email mapping by nomis internet address Id
     * @description Retrieves the person email mapping by NOMIS Email/Internet Address Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonEmailMappingByNomisId']
    put?: never
    post?: never
    /**
     * Delete person email mapping by nomis internet address Id
     * @description Delete the person email mapping by NOMIS Email/Internet Address Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonEmailMappingByNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/email/dps-contact-email-id/{dpsContactEmailId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get contact email mapping by dps contact email Id
     * @description Retrieves the person email mapping by DPS Contact Email Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonEmailMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/contact/nomis-contact-id/{nomisContactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person contact mapping by nomis contact Id
     * @description Retrieves the person contact mapping by NOMIS Contact Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonContactMappingByNomisId']
    put?: never
    post?: never
    /**
     * Delete person contact mapping by nomis contact Id
     * @description Deletes the person contact mapping by NOMIS Contact Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonContactMappingByNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/contact/dps-prisoner-contact-id/{dpsPrisonerContactId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person contact mapping by dps prisoner contact Id
     * @description Retrieves the person contact mapping by DPS Prisoner Contact Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonContactMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/contact-restriction/nomis-contact-restriction-id/{nomisContactRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person contact restriction mapping by nomis contact Id
     * @description Retrieves the person contact restriction mapping by NOMIS ContactRestriction Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonContactRestrictionMappingByNomisId']
    put?: never
    post?: never
    /**
     * Delete person contact restriction mapping by nomis contact Id
     * @description Delete the person contact restriction mapping by NOMIS ContactRestriction Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonContactRestrictionMappingByNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/contact-restriction/dps-prisoner-contact-restriction-id/{dpsPrisonerContactRestrictionId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person contact restriction mapping by dps prisoner contact restriction Id
     * @description Retrieves the person contact restriction mapping by DPS prisoner contact restriction Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonContactRestrictionMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/address/nomis-address-id/{nomisAddressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person address mapping by nomis contact Id
     * @description Retrieves the person address mapping by NOMIS Address Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonAddressMappingByNomisId']
    put?: never
    post?: never
    /**
     * Delete person address mapping by nomis contact Id
     * @description Delete the person address mapping by NOMIS Address Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonAddressMappingByNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/address/dps-contact-address-id/{dpsContactAddressId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get person address mapping by dps contact address Id
     * @description Retrieves the person address mapping by DPS Contact Address Id. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    get: operations['getPersonAddressMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes/nomis-casenote-id/{caseNoteId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by NOMIS id. Requires role NOMIS_CASENOTES
     */
    get: operations['getMappingByNomisId_9']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes/migration-id/{migrationId}/count-by-prisoner': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get count of mappings by migration id grouped by prisoner */
    get: operations['getMappingsByMigrationIdGroupByPrisoner']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for a migration
     * @description Requires role NOMIS_CASENOTES
     */
    get: operations['getLatestMigratedCaseNoteMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes/dps-casenote-id/{dpsCaseNoteId}/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get multiple mappings
     * @description Retrieves mappings by DPS id. In case of past merges, there could be > 1 nomis id per dps id. Requires role NOMIS_CASENOTES
     */
    get: operations['getMappingsByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes/dps-casenote-id/{dpsCaseNoteId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @deprecated
     * @description Retrieves a mapping by DPS id (just the first if > 1). Requires role NOMIS_CASENOTES
     */
    get: operations['getMappingByDpsId_1']
    put?: never
    post?: never
    /**
     * Deletes mapping
     * @description Deletes mapping by DPS id (there could be more than one nomis id if a merge has taken place). Requires role NOMIS_CASENOTES
     */
    delete: operations['deleteMappingsByDpsId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/appointments/nomis-event-id/{eventId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by nomis event id. Requires role NOMIS_APPOINTMENTS
     */
    get: operations['getMappingGivenEventId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/appointments/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMigratedAppointmentMappingsByMigrationId']
    put?: never
    post?: never
    /**
     * Delete appointment mapping entries for the supplied migration id
     * @description To be used when re-running migrations. Note this will not touch any appointments, just the mappings.
     */
    delete: operations['deleteAppointmentMigrationMappingsByMigrationId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/appointments/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for a migration
     * @description Requires role NOMIS_APPOINTMENTS
     */
    get: operations['getLatestMigratedAppointmentMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/appointments/appointment-instance-id/{appointmentInstanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by appointment instance id. Requires role NOMIS_APPOINTMENTS
     */
    get: operations['getMappingGivenId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/allocations/migration/nomis-allocation-id/{nomisAllocationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping for an allocation migration
     * @description Retrieves an allocation migration mapping by the nomis id. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/allocations/migration/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all allocation migration mappings for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMigratedAllocationMappings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/allocations/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for an allocation migration
     * @description Requires role NOMIS_ACTIVITIES
     */
    get: operations['getLatestMigratedMapping_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/alerts/migration-id/{migrationId}/grouped-by-prisoner': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get paged mappings by migration id grouped by prisoner
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run) grouped by prisoner. Results are paged.
     */
    get: operations['getMappingsByMigrationIdGroupByPrisoner_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/alerts/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get paged mappings by migration id
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMappingsByMigrationId_3']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/alerts/dps-alert-id/{dpsAlertId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by DPS id. Requires role NOMIS_ALERTS
     */
    get: operations['getMappingByDpsId_2']
    put?: never
    post?: never
    /**
     * Deletes mapping
     * @description Deletes a mapping by DPS id. Requires role NOMIS_ALERTS
     */
    delete: operations['deleteMappingByDpsId_1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/adjudications/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all mappings of type 'MIGRATED' for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMigratedAdjudicationMappingsByMigrationId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/adjudications/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for a migration
     * @description Requires role NOMIS_ADJUDICATIONS
     */
    get: operations['getLatestMigratedAdjudicationMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/adjudications/charge-number/{chargeNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by DPS charge number. Requires role NOMIS_ADJUDICATIONS
     */
    get: operations['getMappingGivenNomisId_3']
    put?: never
    post?: never
    /**
     * Deletes a specific mapping by DPS charge number
     * @description Deletes the mapping table row. Requires role NOMIS_ADJUDICATIONS
     */
    delete: operations['deleteMapping_2']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/adjudications/adjudication-number/{adjudicationNumber}/charge-sequence/{chargeSequence}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by NOMIS adjudication number and charge sequence. Requires role NOMIS_ADJUDICATIONS
     */
    get: operations['getMappingGivenDpsId_3']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/activities/schedules/scheduled-instance-id/{scheduledInstanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get scheduled instance mapping
     * @description Retrieves a mapping by scheduled instance id. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getScheduleInstanceMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/activities/migration/nomis-course-activity-id/{courseActivityId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping for an activity migration
     * @description Retrieves an activity migration mapping by course activity id. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getMapping_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/activities/migration/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get paged mappings by migration id
     * @description Retrieve all activity migration mappings for the given migration id (identifies a single migration run). Results are paged.
     */
    get: operations['getMigratedActivityMappings']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/activities/migration/migrated/latest': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get the latest mapping for a migration
     * @description Requires role NOMIS_ACTIVITIES
     */
    get: operations['getLatestMigratedMapping_2']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/activities/activity-schedule-id/{activityScheduleId}/scheduled-instance-id/{scheduledInstanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get scheduled instance mapping
     * @description Retrieves a mapping by activity schedule id and scheduled instance id. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getScheduleMapping']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/activities/activity-schedule-id/{activityScheduleId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * get mapping
     * @description Retrieves a mapping by activity schedule id. Requires role NOMIS_ACTIVITIES
     */
    get: operations['getMappingGivenId_1']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/locations/nomis/{nomisLocationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves the DPS location id from the NOMIS internal location id
     * @description Requires role <b>NOMIS_DPS_MAPPING__LOCATIONS__R</b>
     */
    get: operations['getLocationMappingByNomisId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/api/locations/dps/{dpsLocationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Retrieves the NOMIS location id from the DPS location id
     * @description Requires role <b>NOMIS_DPS_MAPPING__LOCATIONS__R</b>
     */
    get: operations['getLocationMappingByDpsId']
    put?: never
    post?: never
    delete?: never
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/prison/{prisonId}/room-mappings/nomis-room-id/{nomisRoomDescription}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes a room mapping
     * @description Removes room mapping given the prison and nomis room description. Requires role NOMIS_VISITS
     */
    delete: operations['deleteRoomMapping']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/schedules/max-nomis-schedule-id/{maxCourseScheduleId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete all mappings with a nomis schedule id greater than the given value
     * @description Used to delete mappings records in preprod that have been copied from prod but don't have any NOMIS data.
     */
    delete: operations['deleteCourseSchedulesAfterId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/locations/nomis/{locationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes a specific location mapping by Nomis location id
     * @description Deletes the location from the mapping table. Requires role NOMIS_LOCATIONS
     */
    delete: operations['deleteMappingGivenNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/locations/dps/{locationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes a specific location mapping by DPS location id
     * @description Deletes the location from the mapping table. Requires role NOMIS_LOCATIONS
     */
    delete: operations['deleteMappingGivenDpsId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/csip/dps-csip-id/{dpsCSIPId}/all': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes a specific CSIP report mapping by DPS CSIP id and its associated children
     * @description Deletes a mapping by DPS id and any children. Requires role NOMIS_CSIP
     */
    delete: operations['deleteMapping_3']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/sentences/dps-sentence-id/{dpsSentenceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes a sentence mapping
     * @description Deletes a sentence mapping by DPS id. Requires role NOMIS_COURT_SENTENCING
     */
    delete: operations['deleteSentenceMappingByDpsId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-charges/nomis-court-charge-id/{nomisCourtChargeId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes court charge mapping
     * @description Deletes a court charge mapping by NOMIS id. Requires role NOMIS_COURT_SENTENCING
     */
    delete: operations['deleteCourtChargeMappingByNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-cases/nomis-court-case-id/{nomisCourtCaseId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes court case mapping
     * @description Deletes a court case mapping by NOMIS id. Requires role NOMIS_COURT_SENTENCING
     */
    delete: operations['deleteMappingByNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-cases/dps-court-case-id/{dpsCourtCaseId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes court case mapping
     * @description Deletes a court case mapping by DPS id. Requires role NOMIS_COURT_SENTENCING
     */
    delete: operations['deleteMappingByDpsId_2']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-appearances/nomis-court-appearance-id/{nomisCourtAppearanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes court appearance mapping
     * @description Deletes a court appearance mapping by NOMIS id. Requires role NOMIS_COURT_SENTENCING
     */
    delete: operations['deleteCourtAppearanceMappingByNomisId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/court-sentencing/court-appearances/dps-court-appearance-id/{dpsCourtAppearanceId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes court appearances mapping
     * @description Deletes a court appearances mapping by DPS id. Requires role NOMIS_COURT_SENTENCING
     */
    delete: operations['deleteCourtAppearanceMappingByDpsId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person/employment/nomis-person-id/{nomisPersonId}/nomis-sequence-number/{nomisSequenceNumber}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete person employment mapping by nomis person id and sequence
     * @description Delete the person employment mapping by NOMIS person id and NOMIS sequence number. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deletePersonEmploymentMappingByNomisIds']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/contact-person': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes all contact person mappings
     * @description Deletes all contact person mappings regardless of source. This includes person, phone, address, email, employment, identifiers, restrictions, contacts and contact restrictions. This is expected to only ever been used in a non-production environment. Requires role ROLE_NOMIS_CONTACTPERSONS
     */
    delete: operations['deleteAllMappings_3']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/casenotes/nomis-casenote-id/{nomisCaseNoteId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes mapping
     * @description Deletes a mapping by Nomis id. Requires role NOMIS_CASENOTES
     */
    delete: operations['deleteMappingByNomisId_1']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/appointments/appointment-instance-id/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes a specific mapping by appointment instance id
     * @description Deletes the mapping table row. Requires role NOMIS_APPOINTMENTS
     */
    delete: operations['deleteMapping_4']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/adjudications/all/migration-id/{migrationId}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Delete all adjudication related mapping entries for the given migration id
     * @description Delete mapping entries created during a single migration for adjudications and associated hearings and punishments
     */
    delete: operations['deleteMappingsByMigrationId']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
  '/mapping/activities/activity-schedule-id/{id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    post?: never
    /**
     * Deletes a specific mapping by activity schedule id
     * @description Deletes the mapping table row. Requires role NOMIS_ACTIVITIES
     */
    delete: operations['deleteMapping_5']
    options?: never
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /** @description Batch of Adjudication punishment (aka award) mappings to create and delete */
    AdjudicationPunishmentBatchUpdateMappingDto: {
      /** @description Adjudication punishment mapping */
      punishmentsToCreate: components['schemas']['AdjudicationPunishmentMappingDto'][]
      punishmentsToDelete: components['schemas']['AdjudicationPunishmentNomisIdDto'][]
    }
    /** @description Adjudication punishment (aka award) mapping */
    AdjudicationPunishmentMappingDto: {
      /**
       * Format: int64
       * @description NOMIS booking id
       * @example 123456
       */
      nomisBookingId: number
      /**
       * Format: int32
       * @description NOMIS sanction sequence
       * @example 4
       */
      nomisSanctionSequence: number
      /**
       * @description DPS punishment id
       * @example 123456
       */
      dpsPunishmentId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @default ADJUDICATION_CREATED
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'ADJUDICATION_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description ID of mapping identified by the NOMIS id for an adjudication punishment (aka award) mapping */
    AdjudicationPunishmentNomisIdDto: {
      /**
       * Format: int64
       * @description NOMIS booking id
       * @example 123456
       */
      nomisBookingId: number
      /**
       * Format: int32
       * @description NOMIS sanction sequence
       * @example 4
       */
      nomisSanctionSequence: number
    }
    ErrorResponse: {
      /** Format: int32 */
      status: number
      errorCode?: string
      userMessage?: string
      developerMessage?: string
      moreInfo?: string
    }
    Unit: Record<string, never>
    /** @description Prison person mapping */
    PrisonPersonMigrationMappingRequest: {
      /**
       * @description The prisoner number
       * @example A1234AA
       */
      nomisPrisonerNumber: string
      /**
       * @description The type of migration for this person, e.g. which data is being migrated
       * @example PHYSICAL_ATTRIBUTES
       * @enum {string}
       */
      migrationType: 'PHYSICAL_ATTRIBUTES' | 'PROFILE_DETAILS_PHYSICAL_ATTRIBUTES'
      /**
       * @description The ids of entities created in DPS. Held for audit purposes only.
       * @example 1, 2, 3
       */
      dpsIds: number[]
      /**
       * @description A unique reference for the migration, usually a timestamp
       * @example 2024-06-03T11:18:33
       */
      label: string
    }
    PrisonPersonMigrationMapping: {
      nomisPrisonerNumber: string
      /** @enum {string} */
      migrationType: 'PHYSICAL_ATTRIBUTES' | 'PROFILE_DETAILS_PHYSICAL_ATTRIBUTES'
      dpsIds: string
      label: string
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
      new: boolean
      id: string
      isNew: boolean
    }
    /** @description Batch of Court Charge mappings to create and delete */
    CourtChargeBatchUpdateMappingDto: {
      /** @description Court Charge mappings to create */
      courtChargesToCreate: components['schemas']['CourtChargeMappingDto'][]
      /** @description Court Charge mappings to delete */
      courtChargesToDelete: components['schemas']['CourtChargeNomisIdDto'][]
    }
    /** @description Offender Charge mapping */
    CourtChargeMappingDto: {
      /**
       * Format: int64
       * @description NOMIS offender charge id
       * @example 123456
       */
      nomisCourtChargeId: number
      /**
       * @description DPS offender charge id
       * @example 123456
       */
      dpsCourtChargeId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @default DPS_CREATED
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description ID of mapping identified by the NOMIS id for a Court Charge mapping */
    CourtChargeNomisIdDto: {
      /**
       * Format: int64
       * @description NOMIS court charge id
       * @example 123456
       */
      nomisCourtChargeId: number
    }
    /** @description Case note mapping */
    CaseNoteMappingDto: {
      /** @description Case note id in DPS */
      dpsCaseNoteId: string
      /**
       * Format: int64
       * @description Case note id in Nomis
       */
      nomisCaseNoteId: number
      /** @description Prisoner number in Nomis */
      offenderNo: string
      /**
       * Format: int64
       * @description Nomis booking id
       */
      nomisBookingId: number
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description NOMIS to Alert mapping IDs */
    AlertMappingIdDto: {
      /** @description DPS alert id */
      dpsAlertId: string
      /**
       * Format: int64
       * @description NOMIS booking id
       */
      nomisBookingId: number
      /**
       * Format: int64
       * @description NOMIS alert sequence
       */
      nomisAlertSequence: number
    }
    MergedPrisonerAlertMappingsDto: {
      /** @description Prisoner whose mappings need removing */
      removedOffenderNo: string
      prisonerMapping: components['schemas']['PrisonerAlertMappingsDto']
    }
    /** @description Mappings for a prisoner created during migration */
    PrisonerAlertMappingsDto: {
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /**
       * @description Date time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
      /** @description Mapping IDs */
      mappings: components['schemas']['AlertMappingIdDto'][]
    }
    /** @description NOMIS to Alert mapping */
    AlertMappingDto: {
      /** @description DPS alert id */
      dpsAlertId: string
      /**
       * Format: int64
       * @description NOMIS booking id
       */
      nomisBookingId: number
      /**
       * Format: int64
       * @description NOMIS alert sequence
       */
      nomisAlertSequence: number
      /** @description Prisoner number */
      offenderNo: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /**
       * @description Date time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description Update mapping NOMIS Ids */
    NomisMappingIdUpdate: {
      /**
       * Format: int64
       * @description NOMIS booking id
       */
      bookingId: number
    }
    /** @description NOMIS to Activity schedule mapping */
    ActivityMappingDto: {
      /**
       * Format: int64
       * @description Activity schedule id
       */
      activityScheduleId: number
      /**
       * Format: int64
       * @description Activity id
       */
      activityId?: number
      /**
       * Format: int64
       * @description NOMIS course activity id
       */
      nomisCourseActivityId: number
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'NOMIS_CREATED' | 'ACTIVITY_CREATED'
      /** @description Scheduled instance to course schedule mappings */
      scheduledInstanceMappings: components['schemas']['ActivityScheduleMappingDto'][]
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description NOMIS to Activity schedule mapping */
    ActivityScheduleMappingDto: {
      /**
       * Format: int64
       * @description Activity scheduled instance id
       */
      scheduledInstanceId: number
      /**
       * Format: int64
       * @description NOMIS course schedule id
       */
      nomisCourseScheduleId: number
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'ACTIVITY_CREATED' | 'ACTIVITY_UPDATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description Create room mapping request */
    CreateRoomMappingDto: {
      /** @description VSIP room id */
      vsipId: string
      /** @description nomis room description (unique within prison) */
      nomisRoomDescription: string
      /** @description open or closed indicator, default is false */
      isOpen: boolean
    }
    /** @description NOMIS to VSIP Visit Id mapping */
    VisitMappingDto: {
      /**
       * Format: int64
       * @description nomis visit id
       */
      nomisId: number
      /** @description VSIP visit id */
      vsipId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'ONLINE'
      /**
       * @description Date time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    DuplicateErrorContentObject: {
      duplicate: Record<string, never>
      existing: Record<string, never>
    }
    DuplicateMappingErrorResponse: {
      moreInfo: components['schemas']['DuplicateErrorContentObject']
      /** @enum {string} */
      status:
        | '100 CONTINUE'
        | '101 SWITCHING_PROTOCOLS'
        | '102 PROCESSING'
        | '103 EARLY_HINTS'
        | '103 CHECKPOINT'
        | '200 OK'
        | '201 CREATED'
        | '202 ACCEPTED'
        | '203 NON_AUTHORITATIVE_INFORMATION'
        | '204 NO_CONTENT'
        | '205 RESET_CONTENT'
        | '206 PARTIAL_CONTENT'
        | '207 MULTI_STATUS'
        | '208 ALREADY_REPORTED'
        | '226 IM_USED'
        | '300 MULTIPLE_CHOICES'
        | '301 MOVED_PERMANENTLY'
        | '302 FOUND'
        | '302 MOVED_TEMPORARILY'
        | '303 SEE_OTHER'
        | '304 NOT_MODIFIED'
        | '305 USE_PROXY'
        | '307 TEMPORARY_REDIRECT'
        | '308 PERMANENT_REDIRECT'
        | '400 BAD_REQUEST'
        | '401 UNAUTHORIZED'
        | '402 PAYMENT_REQUIRED'
        | '403 FORBIDDEN'
        | '404 NOT_FOUND'
        | '405 METHOD_NOT_ALLOWED'
        | '406 NOT_ACCEPTABLE'
        | '407 PROXY_AUTHENTICATION_REQUIRED'
        | '408 REQUEST_TIMEOUT'
        | '409 CONFLICT'
        | '410 GONE'
        | '411 LENGTH_REQUIRED'
        | '412 PRECONDITION_FAILED'
        | '413 PAYLOAD_TOO_LARGE'
        | '413 REQUEST_ENTITY_TOO_LARGE'
        | '414 URI_TOO_LONG'
        | '414 REQUEST_URI_TOO_LONG'
        | '415 UNSUPPORTED_MEDIA_TYPE'
        | '416 REQUESTED_RANGE_NOT_SATISFIABLE'
        | '417 EXPECTATION_FAILED'
        | '418 I_AM_A_TEAPOT'
        | '419 INSUFFICIENT_SPACE_ON_RESOURCE'
        | '420 METHOD_FAILURE'
        | '421 DESTINATION_LOCKED'
        | '422 UNPROCESSABLE_ENTITY'
        | '423 LOCKED'
        | '424 FAILED_DEPENDENCY'
        | '425 TOO_EARLY'
        | '426 UPGRADE_REQUIRED'
        | '428 PRECONDITION_REQUIRED'
        | '429 TOO_MANY_REQUESTS'
        | '431 REQUEST_HEADER_FIELDS_TOO_LARGE'
        | '451 UNAVAILABLE_FOR_LEGAL_REASONS'
        | '500 INTERNAL_SERVER_ERROR'
        | '501 NOT_IMPLEMENTED'
        | '502 BAD_GATEWAY'
        | '503 SERVICE_UNAVAILABLE'
        | '504 GATEWAY_TIMEOUT'
        | '505 HTTP_VERSION_NOT_SUPPORTED'
        | '506 VARIANT_ALSO_NEGOTIATES'
        | '507 INSUFFICIENT_STORAGE'
        | '508 LOOP_DETECTED'
        | '509 BANDWIDTH_LIMIT_EXCEEDED'
        | '510 NOT_EXTENDED'
        | '511 NETWORK_AUTHENTICATION_REQUIRED'
      /** Format: int32 */
      errorCode: number
      userMessage: string
      developerMessage?: string
    }
    /** @description NOMIS to Sentencing mapping */
    SentencingAdjustmentMappingDto: {
      /**
       * Format: int64
       * @description NOMIS Adjustment id
       */
      nomisAdjustmentId: number
      /**
       * @description NOMIS Adjustment category
       * @enum {string}
       */
      nomisAdjustmentCategory: 'SENTENCE' | 'KEY-DATE'
      /** @description Adjustment id from sentencing service */
      adjustmentId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'SENTENCING_CREATED'
      /**
       * @description Date time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description Batch of Adjudication punishment (aka award) mappings */
    AdjudicationPunishmentBatchMappingDto: {
      /** @description Adjudication punishment mapping */
      punishments: components['schemas']['AdjudicationPunishmentMappingDto'][]
    }
    /** @description Non-association mapping */
    NonAssociationMappingDto: {
      /**
       * Format: int64
       * @description Non-Association id
       */
      nonAssociationId: number
      /**
       * @description First NOMIS Offender No
       * @example A1234BC
       */
      firstOffenderNo: string
      /**
       * @description Second NOMIS Offender No
       * @example D5678EF
       */
      secondOffenderNo: string
      /**
       * Format: int32
       * @description NOMIS type sequence
       */
      nomisTypeSequence: number
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'NON_ASSOCIATION_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description Location mapping */
    LocationMappingDto: {
      /** @description Location id in DPS */
      dpsLocationId: string
      /**
       * Format: int64
       * @description Location id in Nomis
       */
      nomisLocationId: number
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'LOCATION_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description Incident mapping */
    IncidentMappingDto: {
      /**
       * Format: int64
       * @description NOMIS Incident id
       */
      nomisIncidentId: number
      /** @description DPS Incident id from incident reporting service */
      dpsIncidentId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description NOMIS to Incentive mapping */
    IncentiveMappingDto: {
      /**
       * Format: int64
       * @description NOMIS booking id
       */
      nomisBookingId: number
      /**
       * Format: int64
       * @description NOMIS incentive sequence
       */
      nomisIncentiveSequence: number
      /**
       * Format: int64
       * @description Incentive id
       */
      incentiveId: number
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'INCENTIVE_CREATED'
      /**
       * @description Date time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description Adjudication mapping (same value for NOMIS and DPS) */
    AdjudicationMappingDto: {
      /**
       * Format: int64
       * @description NOMIS Adjudication number
       * @example 123456
       */
      adjudicationNumber: number
      /**
       * Format: int32
       * @description NOMIS Charges sequence
       * @example 1
       */
      chargeSequence: number
      /**
       * @description DPS Charges number
       * @example 123456/1
       */
      chargeNumber: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @default ADJUDICATION_CREATED
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'ADJUDICATION_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description CSIP Child mapping */
    CSIPChildMappingDto: {
      /**
       * Format: int64
       * @description NOMIS CSIP child id
       */
      nomisId: number
      /** @description DPS CSIP child id */
      dpsId: string
      /** @description DPS CSIP Report id */
      dpsCSIPReportId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    CSIPReviewMapping: {
      dpsCSIPReviewId: string
      dpsCSIPReportId: string
      /** Format: int64 */
      nomisCSIPReviewId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      new: boolean
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
      id: string
      isNew: boolean
    }
    CSIPPlanMapping: {
      dpsCSIPPlanId: string
      dpsCSIPReportId: string
      /** Format: int64 */
      nomisCSIPPlanId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      new: boolean
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
      id: string
      isNew: boolean
    }
    CSIPInterviewMapping: {
      dpsCSIPInterviewId: string
      dpsCSIPReportId: string
      /** Format: int64 */
      nomisCSIPInterviewId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      new: boolean
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
      id: string
      isNew: boolean
    }
    CSIPFactorMapping: {
      dpsCSIPFactorId: string
      dpsCSIPReportId: string
      /** Format: int64 */
      nomisCSIPFactorId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      new: boolean
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
      id: string
      isNew: boolean
    }
    /** @description Full CSIP mapping */
    CSIPFullMappingDto: {
      /**
       * Format: int64
       * @description NOMIS CSIP Report id
       */
      nomisCSIPReportId: number
      /** @description DPS CSIP Report id from DPS CSIP service */
      dpsCSIPReportId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
      /** @description CSIP Attendee Mappings */
      attendeeMappings: components['schemas']['CSIPChildMappingDto'][]
      /** @description CSIP Factor Mappings */
      factorMappings: components['schemas']['CSIPChildMappingDto'][]
      /** @description CSIP Interview Mappings */
      interviewMappings: components['schemas']['CSIPChildMappingDto'][]
      /** @description CSIP Plan Mappings */
      planMappings: components['schemas']['CSIPChildMappingDto'][]
      /** @description CSIP Review Mappings */
      reviewMappings: components['schemas']['CSIPChildMappingDto'][]
    }
    CSIPAttendeeMapping: {
      dpsCSIPAttendeeId: string
      dpsCSIPReportId: string
      /** Format: int64 */
      nomisCSIPAttendeeId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      new: boolean
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
      id: string
      isNew: boolean
    }
    /** @description CSIP mapping */
    CSIPReportMappingDto: {
      /**
       * Format: int64
       * @description NOMIS CSIP Report id
       */
      nomisCSIPReportId: number
      /** @description CSIP Report id from DPS CSIP service */
      dpsCSIPReportId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    CSIPMapping: {
      dpsCSIPId: string
      /** Format: int64 */
      nomisCSIPId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      new: boolean
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
      id: string
      isNew: boolean
    }
    /** @description Sentence mapping */
    SentenceMappingDto: {
      /**
       * Format: int64
       * @description NOMIS booking id
       * @example 123456
       */
      nomisBookingId: number
      /**
       * Format: int32
       * @description NOMIS sentence sequence
       * @example 4
       */
      nomisSentenceSequence: number
      /**
       * @description DPS sentence id
       * @example 123456
       */
      dpsSentenceId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @default DPS_CREATED
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    SentenceMapping: {
      dpsSentenceId: string
      /** Format: int64 */
      nomisBookingId: number
      /** Format: int32 */
      nomisSentenceSequence: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      new: boolean
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
      id: string
      isNew: boolean
    }
    CourtChargeMapping: {
      dpsCourtChargeId: string
      /** Format: int64 */
      nomisCourtChargeId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      new: boolean
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
      id: string
      isNew: boolean
    }
    /** @description Court appearance mapping */
    CourtAppearanceMappingDto: {
      /**
       * Format: int64
       * @description NOMIS court appearance id
       * @example 123456
       */
      nomisCourtAppearanceId: number
      /**
       * @description DPS court appearance id
       * @example 123456
       */
      dpsCourtAppearanceId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @default DPS_CREATED
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description Court case mapping including child entity mapping */
    CourtCaseAllMappingDto: {
      /**
       * Format: int64
       * @description NOMIS court case id
       * @example 123456
       */
      nomisCourtCaseId: number
      /**
       * @description DPS court case id
       * @example 123456
       */
      dpsCourtCaseId: string
      /** @description Court Appearance mappings */
      courtAppearances: components['schemas']['CourtAppearanceMappingDto'][]
      /** @description Court Charge mappings */
      courtCharges: components['schemas']['CourtChargeMappingDto'][]
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @default DPS_CREATED
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    CourtCaseMapping: {
      dpsCourtCaseId: string
      /** Format: int64 */
      nomisCourtCaseId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      new: boolean
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
      id: string
      isNew: boolean
    }
    CourtAppearanceMapping: {
      dpsCourtAppearanceId: string
      /** Format: int64 */
      nomisCourtAppearanceId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      new: boolean
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
      id: string
      isNew: boolean
    }
    PersonPhoneMappingDto: {
      /** @description DPS id */
      dpsId: string
      /**
       * Format: int64
       * @description NOMIS id
       */
      nomisId: number
      /**
       * @description DPS phone type
       * @enum {string}
       */
      dpsPhoneType: 'ADDRESS' | 'PERSON'
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
    }
    PersonRestrictionMappingDto: {
      /** @description DPS id */
      dpsId: string
      /**
       * Format: int64
       * @description NOMIS id
       */
      nomisId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
    }
    PersonMappingDto: {
      /** @description DPS id */
      dpsId: string
      /**
       * Format: int64
       * @description NOMIS id
       */
      nomisId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
    }
    /** @description Mappings for a Person and there associated child entities */
    ContactPersonMappingsDto: {
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /**
       * @description Date time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
      personMapping: components['schemas']['ContactPersonSimpleMappingIdDto']
      /** @description Person address mapping */
      personAddressMapping: components['schemas']['ContactPersonSimpleMappingIdDto'][]
      /** @description Person phone mapping */
      personPhoneMapping: components['schemas']['ContactPersonPhoneMappingIdDto'][]
      /** @description Person email mapping */
      personEmailMapping: components['schemas']['ContactPersonSimpleMappingIdDto'][]
      /** @description Person employment mapping */
      personEmploymentMapping: components['schemas']['ContactPersonSequenceMappingIdDto'][]
      /** @description Person identifier mapping */
      personIdentifierMapping: components['schemas']['ContactPersonSequenceMappingIdDto'][]
      /** @description Person restriction mapping */
      personRestrictionMapping: components['schemas']['ContactPersonSimpleMappingIdDto'][]
      /** @description Person contact mapping */
      personContactMapping: components['schemas']['ContactPersonSimpleMappingIdDto'][]
      /** @description Person contact restriction mapping */
      personContactRestrictionMapping: components['schemas']['ContactPersonSimpleMappingIdDto'][]
    }
    /** @description NOMIS to DPS simple mapping IDs */
    ContactPersonPhoneMappingIdDto: {
      /**
       * Format: int64
       * @description NOMIS id
       */
      nomisId: number
      /** @description DPS id */
      dpsId: string
      /**
       * @description DPS phone type
       * @enum {string}
       */
      dpsPhoneType: 'ADDRESS' | 'PERSON'
    }
    /** @description NOMIS to DPS simple mapping IDs */
    ContactPersonSequenceMappingIdDto: {
      /** @description DPS id */
      dpsId: string
      /**
       * Format: int64
       * @description NOMIS id
       */
      nomisPersonId: number
      /**
       * Format: int64
       * @description NOMIS sequence
       */
      nomisSequenceNumber: number
    }
    /** @description NOMIS to DPS simple mapping IDs */
    ContactPersonSimpleMappingIdDto: {
      /** @description DPS id */
      dpsId: string
      /**
       * Format: int64
       * @description NOMIS id
       */
      nomisId: number
    }
    PersonIdentifierMappingDto: {
      /** @description DPS id */
      dpsId: string
      /**
       * Format: int64
       * @description NOMIS id
       */
      nomisPersonId: number
      /**
       * Format: int64
       * @description NOMIS sequence
       */
      nomisSequenceNumber: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
    }
    PersonEmailMappingDto: {
      /** @description DPS id */
      dpsId: string
      /**
       * Format: int64
       * @description NOMIS id
       */
      nomisId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
    }
    PersonContactRestrictionMappingDto: {
      /** @description DPS id */
      dpsId: string
      /**
       * Format: int64
       * @description NOMIS id
       */
      nomisId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
    }
    PersonContactMappingDto: {
      /** @description DPS id */
      dpsId: string
      /**
       * Format: int64
       * @description NOMIS id
       */
      nomisId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
    }
    PersonAddressMappingDto: {
      /** @description DPS id */
      dpsId: string
      /**
       * Format: int64
       * @description NOMIS id
       */
      nomisId: number
      label?: string
      /** @enum {string} */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /** @example 2021-07-05T10:35:17 */
      whenCreated?: string
    }
    /** @description NOMIS to Case note mapping IDs */
    CaseNoteMappingIdDto: {
      /** @description DPS case note id */
      dpsCaseNoteId: string
      /**
       * Format: int64
       * @description NOMIS case note id
       */
      nomisCaseNoteId: number
      /**
       * Format: int64
       * @description NOMIS booking id
       */
      nomisBookingId: number
    }
    /** @description Mappings for a prisoner created during migration */
    PrisonerCaseNoteMappingsDto: {
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'NOMIS_CREATED' | 'DPS_CREATED'
      /**
       * @description Date time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
      /** @description Mapping IDs */
      mappings: components['schemas']['CaseNoteMappingIdDto'][]
    }
    /** @description NOMIS to Appointment mapping */
    AppointmentMappingDto: {
      /**
       * Format: int64
       * @description Appointment instance id
       */
      appointmentInstanceId: number
      /**
       * Format: int64
       * @description NOMIS course activity id
       */
      nomisEventId: number
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @default APPOINTMENT_CREATED
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'APPOINTMENT_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description NOMIS to Activities allocation mapping */
    AllocationMigrationMappingDto: {
      /**
       * Format: int64
       * @description NOMIS allocation id
       */
      nomisAllocationId: number
      /**
       * Format: int64
       * @description Activity allocation id
       */
      activityAllocationId: number
      /**
       * Format: int64
       * @description Activity id
       */
      activityId: number
      /** @description Label (a timestamp for migrated ids) */
      label: string
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description Adjudication mapping for all entities in an adjudication */
    AdjudicationAllMappingDto: {
      adjudicationId: components['schemas']['AdjudicationMappingDto']
      /** @description Adjudication hearing mapping */
      hearings: components['schemas']['AdjudicationHearingMappingDto'][]
      /** @description Adjudication punishment mapping */
      punishments: components['schemas']['AdjudicationPunishmentMappingDto'][]
      /** @description Label (a timestamp for migrated ids) */
      label: string
      /**
       * @description Mapping type
       * @default MIGRATED
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'ADJUDICATION_CREATED'
    }
    /** @description Adjudication hearing mapping */
    AdjudicationHearingMappingDto: {
      /**
       * Format: int64
       * @description NOMIS hearing id
       * @example 123456
       */
      nomisHearingId: number
      /**
       * @description DPS hearing id
       * @example 123456
       */
      dpsHearingId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @default ADJUDICATION_CREATED
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'ADJUDICATION_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description NOMIS to Activity schedule mapping */
    ActivityMigrationMappingDto: {
      /**
       * Format: int64
       * @description NOMIS course activity id
       */
      nomisCourseActivityId: number
      /**
       * Format: int64
       * @description Activity id
       */
      activityId: number
      /**
       * Format: int64
       * @description 2nd Activity id
       */
      activityId2?: number
      /** @description Label (a timestamp for migrated ids) */
      label: string
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    /** @description Room mapping request */
    RoomMappingDto: {
      /** @description VSIP room id */
      vsipId: string
      /** @description nomis room description (unique within prison) */
      nomisRoomDescription: string
      /** @description prison id */
      prisonId: string
      /** @description open or closed indicator */
      isOpen: boolean
    }
    Pageable: {
      /** Format: int32 */
      page?: number
      /** Format: int32 */
      size?: number
      sort?: string[]
    }
    /** @description NOMIS to DPS Identifying Mark Image Mapping */
    IdentifyingMarkImageMappingDto: {
      /**
       * Format: int64
       * @description NOMIS OFFENDER_IMAGE_ID
       */
      nomisOffenderImageId: number
      /**
       * Format: int64
       * @description NOMIS OFFENDER_BOOK_ID
       */
      nomisBookingId: number
      /**
       * Format: int64
       * @description NOMIS ID_MARKS_SEQ
       */
      nomisMarksSequence: number
      /**
       * Format: uuid
       * @description DPS unique id
       */
      dpsId: string
      /** @description NOMIS OFFENDER_ID_DISPLAY */
      offenderNo: string
      /** @description Migration ID */
      label?: string
      /**
       * @description The source of the mapping
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /**
       * @description Created timestamp
       * @example 2021-07-05T10:35:17
       */
      whenCreated: string
    }
    /** @description NOMIS to DPS Identifying Mark Mapping */
    IdentifyingMarkMappingDto: {
      /**
       * Format: int64
       * @description NOMIS OFFENDER_BOOK_ID
       */
      nomisBookingId: number
      /**
       * Format: int64
       * @description NOMIS ID_MARKS_SEQ
       */
      nomisMarksSequence: number
      /**
       * Format: uuid
       * @description DPS unique id
       */
      dpsId: string
      /** @description NOMIS OFFENDER_ID_DISPLAY */
      offenderNo: string
      /** @description Migration ID */
      label?: string
      /**
       * @description The source of the mapping
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /**
       * @description Created timestamp
       * @example 2021-07-05T10:35:17
       */
      whenCreated: string
    }
    /** @description Court case mapping */
    CourtCaseMappingDto: {
      /**
       * Format: int64
       * @description NOMIS court case id
       * @example 123456
       */
      nomisCourtCaseId: number
      /**
       * @description DPS court case id
       * @example 123456
       */
      dpsCourtCaseId: string
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @default DPS_CREATED
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    PageCourtCaseMappingDto: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['CourtCaseMappingDto'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    PageableObject: {
      /** Format: int64 */
      offset?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      pageSize?: number
      paged?: boolean
      /** Format: int32 */
      pageNumber?: number
      unpaged?: boolean
    }
    SortObject: {
      empty?: boolean
      sorted?: boolean
      unsorted?: boolean
    }
    /** @description Court appearance mapping */
    CourtAppearanceAllMappingDto: {
      /**
       * Format: int64
       * @description NOMIS court appearance id
       * @example 123456
       */
      nomisCourtAppearanceId: number
      /**
       * @description DPS court appearance id
       * @example 123456
       */
      dpsCourtAppearanceId: string
      /** @description Court Charge mappings */
      courtCharges: components['schemas']['CourtChargeMappingDto'][]
      /** @description Label (a timestamp for migrated ids) */
      label?: string
      /**
       * @description Mapping type
       * @default DPS_CREATED
       * @enum {string}
       */
      mappingType: 'MIGRATED' | 'DPS_CREATED' | 'NOMIS_CREATED'
      /**
       * @description Date-time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    PagePersonMappingDto: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['PersonMappingDto'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description All mappings for a prisoner created either via migration or synchronisation */
    AllPrisonerCaseNoteMappingsDto: {
      /** @description Mappings */
      mappings: components['schemas']['CaseNoteMappingDto'][]
    }
    /** @description All mappings for a prisoner created either via migration or synchronisation */
    AllPrisonerAlertMappingsDto: {
      /** @description Mappings */
      mappings: components['schemas']['AlertMappingDto'][]
    }
    PagePrisonerAlertMappingsSummaryDto: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['PrisonerAlertMappingsSummaryDto'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description Summary of mappings for a prisoner created during migration */
    PrisonerAlertMappingsSummaryDto: {
      /** @description The prisoner number for the set of mappings */
      offenderNo: string
      /**
       * Format: int32
       * @description Count of the number mappings migrated (does not include subsequent alerts synchronised
       */
      mappingsCount: number
      /**
       * @description Date time the mapping was created
       * @example 2021-07-05T10:35:17
       */
      whenCreated?: string
    }
    PageAlertMappingDto: {
      /** Format: int64 */
      totalElements?: number
      /** Format: int32 */
      totalPages?: number
      first?: boolean
      last?: boolean
      /** Format: int32 */
      size?: number
      content?: components['schemas']['AlertMappingDto'][]
      /** Format: int32 */
      number?: number
      sort?: components['schemas']['SortObject']
      /** Format: int32 */
      numberOfElements?: number
      pageable?: components['schemas']['PageableObject']
      empty?: boolean
    }
    /** @description NOMIS DPS Location mapping */
    NomisDpsLocationMapping: {
      /**
       * @description Location id in DPS Locations Service
       * @example f4499772-2e43-4951-861d-04ad86df43fc
       */
      dpsLocationId: string
      /**
       * Format: int64
       * @description Internal Location id in NOMIS
       * @example 2318905
       */
      nomisLocationId: number
    }
  }
  responses: never
  parameters: never
  requestBodies: never
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export interface operations {
  updatePunishmentBatchMappings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdjudicationPunishmentBatchUpdateMappingDto']
      }
    }
    responses: {
      /** @description Mapping entries created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description One of the punishment mappings already exist */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
    }
  }
  createPunishmentBatchMappings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdjudicationPunishmentBatchMappingDto']
      }
    }
    responses: {
      /** @description Mapping entries created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description One of the punishment mappings already exist */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
    }
  }
  upsertMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonPersonMigrationMappingRequest']
      }
    }
    responses: {
      /** @description Mapping created or updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonPersonMigrationMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateMappingsByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Old prisoner number to replace
         * @example A3456KM
         */
        oldOffenderNo: string
        /**
         * @description New prisoner number to use
         * @example A3457LZ
         */
        newOffenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Replacement made, or not present in table */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Replacement would result in an NA with both prisoner numbers the same - requires manual intervention */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  courtChargeBatchUpdateMappings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtChargeBatchUpdateMappingDto']
      }
    }
    responses: {
      /** @description Mapping entries created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description One of the court charge mappings already exist */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
    }
  }
  createCourtChargeMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtChargeMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtChargeMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  updateMappingsByNomisId_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Old prisoner number to replace
         * @example A3456KM
         */
        oldOffenderNo: string
        /**
         * @description New prisoner number to use
         * @example A3457LZ
         */
        newOffenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Replacement made, or not present in table */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateMappingsByBookingId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description The booking id
         * @example 1234567
         */
        bookingId: number
        /**
         * @description New prisoner number to use
         * @example A3457LZ
         */
        newOffenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Replacement made, or not present in table */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteMappingDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  replaceMappingsForPrisonerAfterMerge: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Retained NOMIS offender no
         * @example A1234KT
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['MergedPrisonerAlertMappingsDto']
      }
    }
    responses: {
      /** @description Mappings replaced */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingsForPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS offender no
         * @example A1234KT
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mappings for prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AllPrisonerAlertMappingsDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  replaceMappingsForPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS offender no
         * @example A1234KT
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerAlertMappingsDto']
      }
    }
    responses: {
      /** @description Mappings replaced */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMappingsForPrisoner: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS offender no
         * @example A1234KT
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerAlertMappingsDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  getMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS booking id
         * @example 12345
         */
        bookingId: number
        /**
         * @description NOMIS booking id
         * @example 2
         */
        alertSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateMappingBookingIdByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS booking id
         * @example 12345
         */
        bookingId: number
        /**
         * @description NOMIS booking id
         * @example 2
         */
        alertSequence: number
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NomisMappingIdUpdate']
      }
    }
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllMappings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityMappingDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  updateMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry updated */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityMappingDto']
        }
      }
      /** @description The request is invalid, see response for details */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description An activity schedule mapping to update could not be found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Nomis or activity schedule ids already exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getRoomMappings: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping list Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoomMappingDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createRoomMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS prison Id
         * @example MDI
         */
        prisonId: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CreateRoomMappingDto']
      }
    }
    responses: {
      /** @description Visit mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description mapping for this nomis room and prison already exists */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['VisitMappingDto']
      }
    }
    responses: {
      /** @description Visit mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Nomis or VSIP ids already exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate visit has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  deleteVisitIdMappings: {
    parameters: {
      query?: {
        /**
         * @description if true delete mapping entries created by the migration process only (synchronisation records are unaffected)
         * @example true
         */
        onlyMigrated?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit id mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllSentenceAdjustmentMappings: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentencingAdjustmentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping_2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SentencingAdjustmentMappingDto']
      }
    }
    responses: {
      /** @description Sentence adjustment mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Nomis or Sentencing ids already exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate sentencing adjustment mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  deleteSentenceAdjustmentMappings: {
    parameters: {
      query?: {
        /**
         * @description if true delete mapping entries created by the migration process only (synchronisation records are unaffected)
         * @example true
         */
        onlyMigrated?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description sentence adjustment mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createIdentifyingMarkImageMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AlertMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createIdentifyingMarkMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AlertMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createMapping_3: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['NonAssociationMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate non-association has been rejected. If Error code = 409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  deleteNonAssociationMappings: {
    parameters: {
      query?: {
        /**
         * @description if true delete mapping entries created by the migration process only (synchronisation records are unaffected)
         * @example true
         */
        onlyMigrated?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Non association mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping_4: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['LocationMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate location has been rejected. If Error code = 409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  deleteMappings: {
    parameters: {
      query?: {
        /**
         * @description if true delete mapping entries created by the migration process only (synchronisation records are unaffected)
         * @example true
         */
        onlyMigrated?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Location mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping_5: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IncidentMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate incident has been rejected. If Error code = 409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  deleteMappings_1: {
    parameters: {
      query?: {
        /**
         * @description if true delete mapping entries created by the migration process only (synchronisation records are unaffected)
         * @example true
         */
        onlyMigrated?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Incident mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping_6: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['IncentiveMappingDto']
      }
    }
    responses: {
      /** @description Incentive mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Nomis or Incentive ids already exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate incentive has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  deleteIncentiveMappings: {
    parameters: {
      query?: {
        /**
         * @description if true delete mapping entries created by the migration process only (synchronisation records are unaffected)
         * @example true
         */
        onlyMigrated?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Incentive mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping_7: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdjudicationMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Hearing already exists */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createReviewMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CSIPChildMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPReviewMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate csip has been rejected. If Error code = 409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createPlanMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CSIPChildMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPPlanMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate csip has been rejected. If Error code = 409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createInterviewMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CSIPChildMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPInterviewMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate csip has been rejected. If Error code = 409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createFactorMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CSIPChildMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPFactorMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate csip has been rejected. If Error code = 409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createChildMappings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CSIPFullMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry/entries created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate csip child has been rejected. If Error code = 409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createAttendeeMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CSIPChildMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPAttendeeMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate csip has been rejected. If Error code = 409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createMappingWithChildren: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CSIPFullMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate csip has been rejected. If Error code = 409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  deleteAllMappings: {
    parameters: {
      query?: {
        /**
         * @description if true delete mapping entries created by the migration process only (synchronisation records are unaffected)
         * @example true
         */
        onlyMigrated?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description CSIP mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': Record<string, never>
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping_8: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CSIPReportMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate csip has been rejected. If Error code = 409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createSentenceMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['SentenceMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createMapping_9: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtCaseAllMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtCaseMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createCourtAppearanceMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CourtAppearanceMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearanceMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createPersonPhoneMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonPhoneMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createPersonRestrictionMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonRestrictionMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  getAllPersonMappings: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePersonMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createPersonMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createMappings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ContactPersonMappingsDto']
      }
    }
    responses: {
      /** @description Mappings created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createPersonIdentifierMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonIdentifierMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createPersonEmailMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonEmailMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createPersonContactRestrictionMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonContactRestrictionMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createPersonContactMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonContactMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createPersonAddressMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PersonAddressMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  getMappingsForPrisoner_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS offender no
         * @example A1234KT
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mappings for prisoner */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AllPrisonerCaseNoteMappingsDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMappingsForPrisoner_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS offender no
         * @example A1234KT
         */
        offenderNo: string
      }
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['PrisonerCaseNoteMappingsDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  getMappingsByNomisId: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': number[]
      }
    }
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteMappingDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMappings_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CaseNoteMappingDto'][]
      }
    }
    responses: {
      /** @description Mappings created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createMapping_10: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['CaseNoteMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  getAllMappings_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentMappingDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping_11: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AppointmentMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Nomis or appointment instance ids already exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate incentive has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  createMapping_12: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AllocationMigrationMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Nomis or activity schedule ids already exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMappings_2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AlertMappingDto'][]
      }
    }
    responses: {
      /** @description Mappings created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  getMappings: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageAlertMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping_13: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AlertMappingDto']
      }
    }
    responses: {
      /** @description Mapping created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate mapping has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  deleteAllMappings_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createAllMappings: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdjudicationAllMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication with charge sequence already exist */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAllMappings_2: {
    parameters: {
      query?: {
        migrationOnly?: boolean
        synchronisationOnly?: boolean
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Adjudication mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllMappings_2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationMappingDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping_14: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['AdjudicationMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Adjudication with charge sequence already exist */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  createMapping_15: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody: {
      content: {
        'application/json': components['schemas']['ActivityMigrationMappingDto']
      }
    }
    responses: {
      /** @description Mapping entry created */
      201: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Nomis or activity schedule ids already exist */
      400: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getRoomMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS prison Id
         * @example MDI
         */
        prisonId: string
        /**
         * @description NOMIS room description
         * @example HEI_LW01
         */
        nomisRoomDescription: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['RoomMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description NOMIS room description does not exist in the mapping table for the given prison */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitMappingGivenVsipId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description VSIP Id
         * @example 12345
         */
        vsipId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description VSIP id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getVisitMappingGivenNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS Id
         * @example 12345
         */
        nomisId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description NOMIS id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMigratedVisitMappingsByMigrationId: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteVisitIdMappingsByMigrationId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Visit id mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestMigratedVisitMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['VisitMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSentenceAdjustmentMappingGivenNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS Adjustment Id
         * @example 12345
         */
        nomisAdjustmentId: number
        /**
         * @description NOMIS Adjustment Type
         * @example SENTENCE
         */
        nomisAdjustmentCategory: 'SENTENCE' | 'KEY-DATE'
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentencingAdjustmentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description NOMIS sentence adjustment id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Indicates a duplicate adjustment has been rejected. If Error code = 1409 the body will return a DuplicateErrorResponse */
      409: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['DuplicateMappingErrorResponse']
        }
      }
    }
  }
  getMigratedSentenceAdjustmentMappingsByMigrationId: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentencingAdjustmentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestMigratedSentenceAdjustmentMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentencingAdjustmentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSentencingAdjustmentMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Sentence Adjustment Id
         * @example 12345
         */
        adjustmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentencingAdjustmentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description sentence adjustment id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSentenceAdjustmentMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Sentence Adjustment Id (from sentencing domain)
         * @example 12345
         */
        adjustmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Sentence Adjustment mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingGivenDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS Punishment Id
         * @example 12345
         */
        dpsPunishmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationPunishmentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS Punishment Id
         * @example 12345
         */
        dpsPunishmentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Record deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access denied to this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingGivenNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS Booking Id
         * @example 12345
         */
        nomisBookingId: number
        /**
         * @description NOMIS sanction sequence
         * @example 12
         */
        nomisSanctionSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationPunishmentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIdentifyingMarkImageMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        nomisImageId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IdentifyingMarkImageMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIdentifyingMarkMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        bookingId: number
        sequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IdentifyingMarkMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMigratedPrisonPersonMappings: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PrisonPersonMigrationMappingRequest']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIdentifyingMarkImageMappings: {
    parameters: {
      query?: never
      header?: never
      path: {
        dpsImageId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IdentifyingMarkImageMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIdentifyingMarkMappings: {
    parameters: {
      query?: never
      header?: never
      path: {
        dpsId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IdentifyingMarkMappingDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Not found */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonAssociationMappingGivenNonAssociationId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Non-association id
         * @example 2
         */
        nonAssociationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non association id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteNonAssociationMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Non-association Id
         * @example 12345
         */
        nonAssociationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Non-association mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonAssociationMappingsByMigrationId: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestMigratedNonAssociationMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getNonAssociationMappingGivenNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description First offender number
         * @example A1234BC
         */
        firstOffenderNo: string
        /**
         * @description Second offender number
         * @example D5678EF
         */
        secondOffenderNo: string
        /**
         * @description Nomis type sequence
         * @example 2
         */
        typeSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NonAssociationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Non association id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingGivenNomisId_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Nomis location id
         * @example 12345678
         */
        nomisLocationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingsByMigrationId: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestMigratedMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingGivenDpsId_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS Location id
         * @example 22345678
         */
        dpsLocationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['LocationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByNomisId_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Nomis Incident Id */
        nomisIncidentId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Nomis incident id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingsByNomisId_1: {
    parameters: {
      query: {
        /**
         * @description Nomis Incident Id
         * @example 345
         */
        nomisIncidentId: number[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMigratedMappingsByMigrationId: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingForLatestMigrated: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByDPSId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS Incident id
         * @example 12345
         */
        dpsIncidentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncidentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description DPS Incident id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS Incident Id
         * @example 4321
         */
        dpsIncidentId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Incident mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncentiveMappingGivenNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS booking ID
         * @example 12345
         */
        bookingId: number
        /**
         * @description NOMIS incentive sequence
         * @example 2
         */
        incentiveSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncentiveMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description NOMIS incentive id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMigratedVisitMappingsByMigrationId_1: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncentiveMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestMigratedIncentiveMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncentiveMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getIncentiveMappingGivenIncentiveId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Incentive Id
         * @example 12345
         */
        incentiveId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['IncentiveMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Incentive id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteIncentiveMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Incentive Id
         * @example 12345
         */
        incentiveId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Incentive mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingGivenNomisId_2: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS hearing id
         * @example 123
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingGivenDpsId_2: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS hearing Id
         * @example AB345
         */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMapping_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS Hearing id
         * @example AB345
         */
        id: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByNomisId_2: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS CSIP Review id
         * @example 12345
         */
        nomisCSIPReviewId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPChildMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCSIPReviewMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP review id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCSIPReviewId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPChildMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCSIPReviewMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP Review id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCSIPReviewId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByNomisId_3: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS CSIP Plan id
         * @example 12345
         */
        nomisCSIPPlanId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPChildMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCSIPPlanMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP plan id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCSIPPlanId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPChildMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCSIPPlanMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP Plan id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCSIPPlanId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByNomisId_4: {
    parameters: {
      query?: never
      header?: never
      path: {
        /** @description Nomis CSIP Id */
        nomisCSIPId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPReportMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Nomis csip id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingsByNomisId_2: {
    parameters: {
      query: {
        /**
         * @description Nomis CSIP Id
         * @example 345
         */
        nomisCSIPId: number[]
      }
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPReportMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingsByMigrationId_1: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPFullMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestMigratedCSIPMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPFullMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByNomisId_5: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS CSIP Interview id
         * @example 12345
         */
        nomisCSIPInterviewId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPChildMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCSIPInterviewMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP interview id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCSIPInterviewId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPChildMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCSIPInterviewMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP Interview id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCSIPInterviewId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByNomisId_6: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS CSIP Factor id
         * @example 12345
         */
        nomisCSIPFactorId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPChildMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCSIPFactorMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP factor id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCSIPFactorId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPChildMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCSIPFactorMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP Factor id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCSIPFactorId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getAllMappingsByDPSId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP Report Id
         * @example 12345
         */
        csipId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPFullMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description DPS CSIP Report id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByDPSId_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP Id
         * @example 12345
         */
        csipId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPReportMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description CSIP id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByNomisId_7: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS CSIP Attendee id
         * @example 12345
         */
        nomisCSIPAttendeeId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPChildMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCSIPAttendeeMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP attendee id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCSIPAttendeeId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CSIPChildMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCSIPAttendeeMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP Attendee id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCSIPAttendeeId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSentenceMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS booking id
         * @example 123432
         */
        bookingId: number
        /**
         * @description NOMIS sentence sequence
         * @example 1
         */
        sentenceSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSentenceMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS booking id
         * @example 123432
         */
        bookingId: number
        /**
         * @description NOMIS sentence sequence
         * @example 1
         */
        sentenceSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getSentenceMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS sentence id
         * @example D123
         */
        sentenceId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['SentenceMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtChargeMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS court charge id
         * @example 123
         */
        courtChargeId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtChargeMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtChargeMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS court charge id
         * @example D123
         */
        courtChargeId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtChargeMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByNomisId_8: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS court case id
         * @example 123
         */
        courtCaseId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtCaseMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingsByMigrationId_2: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageCourtCaseMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS court case id
         * @example D123
         */
        courtCaseId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtCaseMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtAppearanceMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS court appearance id
         * @example 123
         */
        courtAppearanceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearanceMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getCourtAppearanceMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS court appearance id
         * @example D123
         */
        courtAppearanceId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CourtAppearanceAllMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonPhoneMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS phone id
         * @example 12345
         */
        nomisPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person phone mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonPhoneMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonPhoneMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS phone id
         * @example 12345
         */
        nomisPhoneId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person phone mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonPhoneMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS contact phone id
         * @example 12345
         */
        dpsContactPhoneId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Phone mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonPhoneMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonAddressPhoneMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS contact phone id
         * @example 12345
         */
        dpsContactAddressPhoneId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Phone mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonPhoneMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS person id
         * @example 12345
         */
        nomisPersonId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS person id
         * @example 12345
         */
        nomisPersonId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person mapping data deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonMappingsByMigrationId: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePersonMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS contact id
         * @example 12345
         */
        dpsContactId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS contact id
         * @example 12345
         */
        dpsContactId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person mapping data */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonRestrictionMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS contact restriction id
         * @example 12345
         */
        nomisPersonRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Restriction mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonRestrictionMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonRestrictionMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS contact restriction id
         * @example 12345
         */
        nomisPersonRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Restriction mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonRestrictionMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS contact restriction id
         * @example 12345
         */
        dpsContactRestrictionId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Restriction mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonRestrictionMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonIdentifierMappingByNomisIds: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS person id
         * @example 12345
         */
        nomisPersonId: number
        /**
         * @description NOMIS identifier sequence
         * @example 4
         */
        nomisSequenceNumber: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person identifier mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonIdentifierMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonIdentifierMappingByNomisIds: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS person id
         * @example 12345
         */
        nomisPersonId: number
        /**
         * @description NOMIS identifier sequence
         * @example 4
         */
        nomisSequenceNumber: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person identifier mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonIdentifierMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS contact identifier id
         * @example 12345
         */
        dpsContactIdentifierId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Identifier mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonIdentifierMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonEmailMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS email id
         * @example 12345
         */
        nomisInternetAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person email mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonEmailMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonEmailMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS email id
         * @example 12345
         */
        nomisInternetAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person email mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonEmailMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS contact email id
         * @example 12345
         */
        dpsContactEmailId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Email mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonEmailMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonContactMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS contact id
         * @example 12345
         */
        nomisContactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Contact mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonContactMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonContactMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS contact id
         * @example 12345
         */
        nomisContactId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Contact mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonContactMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS prisoner contact id
         * @example 12345
         */
        dpsPrisonerContactId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Contact mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonContactMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonContactRestrictionMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS contact restriction id
         * @example 12345
         */
        nomisContactRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person contactRestriction mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonContactRestrictionMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonContactRestrictionMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS contact restriction id
         * @example 12345
         */
        nomisContactRestrictionId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person contact restriction mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonContactRestrictionMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS prisoner contact restriction id
         * @example 12345
         */
        dpsPrisonerContactRestrictionId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Contact Restriction mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonContactRestrictionMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonAddressMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS address id
         * @example 12345
         */
        nomisAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person address mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonAddressMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonAddressMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS address id
         * @example 12345
         */
        nomisAddressId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person address mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getPersonAddressMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS contact address id
         * @example 12345
         */
        dpsContactAddressId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person Address mapping data */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PersonAddressMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByNomisId_9: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS case note id
         * @example 23456789
         */
        caseNoteId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingsByMigrationIdGroupByPrisoner: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': number
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestMigratedCaseNoteMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingsByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS casenote id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCaseNoteId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteMappingDto'][]
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByDpsId_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS casenote id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCaseNoteId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['CaseNoteMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMappingsByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS casenote id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCaseNoteId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingGivenEventId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Nomis event Id
         * @example 700800900
         */
        eventId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMigratedAppointmentMappingsByMigrationId: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAppointmentMigrationMappingsByMigrationId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2023-06-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Appointments migration mapping id mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Insufficient privileges - requires role NOMIS_APPOINTMENTS */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestMigratedAppointmentMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingGivenId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Appointment instance Id
         * @example 12345
         */
        appointmentInstanceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AppointmentMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Nomis allocation Id
         * @example 12345
         */
        nomisAllocationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AllocationMigrationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMigratedAllocationMappings: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AllocationMigrationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestMigratedMapping_1: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AllocationMigrationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingsByMigrationIdGroupByPrisoner_1: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PagePrisonerAlertMappingsSummaryDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingsByMigrationId_3: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['PageAlertMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingByDpsId_2: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS alert id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsAlertId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AlertMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMappingByDpsId_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS alert id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsAlertId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMigratedAdjudicationMappingsByMigrationId: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestMigratedAdjudicationMapping: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingGivenNomisId_3: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS Charge number
         * @example 12345/1
         */
        chargeNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMapping_2: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        chargeNumber: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingGivenDpsId_3: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Adjudication number
         * @example 12345
         */
        adjudicationNumber: number
        /**
         * @description Charge sequence for offence in this adjudication
         * @example 1
         */
        chargeSequence: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['AdjudicationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduleInstanceMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Scheduled instance Id
         * @example 67890
         */
        scheduledInstanceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMapping_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Course activity Id
         * @example 12345
         */
        courseActivityId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityMigrationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMigratedActivityMappings: {
    parameters: {
      query: {
        pageRequest: components['schemas']['Pageable']
      }
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping page returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityMigrationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLatestMigratedMapping_2: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityMigrationMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description No mappings found at all for any migration */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getScheduleMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Activity schedule Id
         * @example 12345
         */
        activityScheduleId: number
        /**
         * @description Scheduled instance Id
         * @example 67890
         */
        scheduledInstanceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getMappingGivenId_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Activity schedule Id
         * @example 12345
         */
        activityScheduleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ActivityMappingDto']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS internal location id
         * @example 2318905
         */
        nomisLocationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description NOMIS to DPS Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NomisDpsLocationMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden to this endpoint. Requires role NOMIS_DPS_MAPPING__LOCATIONS__R */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  getLocationMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS location UUID
         * @example 12345678-1234-5678-abcd-1234567890ab
         */
        dpsLocationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description DPS to NOMIS Mapping Information Returned */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['NomisDpsLocationMapping']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden to this endpoint. Requires role NOMIS_DPS_MAPPING__LOCATIONS__R */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Location id does not exist in mapping table */
      404: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteRoomMapping: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS prison Id
         * @example MDI
         */
        prisonId: string
        /**
         * @description NOMIS room description
         * @example MDI
         */
        nomisRoomDescription: string
      }
      cookie?: never
    }
    requestBody?: {
      content: {
        'application/json': components['schemas']['VisitMappingDto']
      }
    }
    responses: {
      /** @description Visit room mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCourseSchedulesAfterId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Max NOMIS course schedule ID to retain
         * @example 12345
         */
        maxCourseScheduleId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Success */
      200: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description No Content */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMappingGivenNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Nomis Location Id
         * @example 12345678
         */
        locationId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Location mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMappingGivenDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS Location Id
         * @example 1234abcd-5678-1234-5678-0123456789ab
         */
        locationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Location mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMapping_3: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS CSIP Id
         * @example 4321
         */
        dpsCSIPId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description CSIP mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteSentenceMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS sentence id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsSentenceId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCourtChargeMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS court charge id
         * @example 33
         */
        nomisCourtChargeId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS court case id
         * @example 33
         */
        nomisCourtCaseId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMappingByDpsId_2: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS court case id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCourtCaseId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCourtAppearanceMappingByNomisId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS court appearance id
         * @example 33
         */
        nomisCourtAppearanceId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteCourtAppearanceMappingByDpsId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description DPS court appearances id
         * @example edcd118c-41ba-42ea-b5c4-404b453ad58b
         */
        dpsCourtAppearanceId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deletePersonEmploymentMappingByNomisIds: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description NOMIS person id
         * @example 12345
         */
        nomisPersonId: number
        /**
         * @description NOMIS employment sequence
         * @example 4
         */
        nomisSequenceNumber: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Person employment mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access this endpoint is forbidden */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteAllMappings_3: {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description All mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Access forbidden for this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMappingByNomisId_1: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Nomis casenote id
         * @example 3344556677
         */
        nomisCaseNoteId: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping Deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
      /** @description Forbidden to access this endpoint */
      403: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMapping_4: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Appointment instance Id
         * @example 12345
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMappingsByMigrationId: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Migration Id
         * @example 2020-03-24T12:00:00
         */
        migrationId: string
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Adjudication mappings deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
  deleteMapping_5: {
    parameters: {
      query?: never
      header?: never
      path: {
        /**
         * @description Activity schedule Id
         * @example 12345
         */
        id: number
      }
      cookie?: never
    }
    requestBody?: never
    responses: {
      /** @description Mapping deleted */
      204: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['Unit']
        }
      }
      /** @description Unauthorized to access this endpoint */
      401: {
        headers: {
          [name: string]: unknown
        }
        content: {
          'application/json': components['schemas']['ErrorResponse']
        }
      }
    }
  }
}
