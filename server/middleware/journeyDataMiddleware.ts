import { RequestHandler } from 'express'
import { Journey } from '../@types/express'

const MAX_CONCURRENT_JOURNEYS = 20

export default function journeyDataMiddleware(journeyName: keyof Journey): RequestHandler {
  return (req, res, next) => {
    // This function redefines the existing session properties, intercepting their getter and setters and replacing the
    // implementation with the usage of the journey data map. In this way, we can have journey instance specific session data (i.e. multiple
    // different browser tabs open with the same journey) without having to change the handlers or views, which remain unaware of this change.
    // The journeyId comes from the path parameter,generated by insertJourneyIdentifier.ts

    req.session.journey ??= {}
    req.session.journeyData ??= {}

    Object.defineProperty(req.session.journey, journeyName, {
      get() {
        const { journeyId } = req.params
        return req.session.journeyData[journeyId]?.[journeyName]
      },
      set(value) {
        const { journeyId } = req.params
        req.session.journeyData[journeyId] ??= { instanceUnixEpoch: Date.now() }
        req.session.journeyData[journeyId][journeyName] = value

        if (value === null || value === undefined) {
          delete req.session.journeyData[journeyId]
        }

        // To prevent data leak, a MAX_CONCURRENT_JOURNEYS is defined. Once this number is reached, the oldest journey data is replaced
        if (Object.keys(req.session.journeyData).length > MAX_CONCURRENT_JOURNEYS) {
          const oldestKey = Object.keys(req.session.journeyData).reduce((key, v) =>
            req.session.journeyData[v].instanceUnixEpoch < req.session.journeyData[key].instanceUnixEpoch ? v : key,
          )

          delete req.session.journeyData[oldestKey]
        }
      },
    })

    next()
  }
}
